import { Configuration } from 'webpack';
export declare function webpack(config: Configuration): {
    plugins: any[];
    module: {
        rules: import("webpack").RuleSetRule[];
    } | {
        rules: import("webpack").RuleSetRule[];
        noParse?: RegExp | RegExp[] | ((content: string) => boolean) | undefined;
        unknownContextRequest?: string | undefined;
        unknownContextRecursive?: boolean | undefined;
        unknownContextRegExp?: RegExp | undefined;
        unknownContextCritical?: boolean | undefined;
        exprContextRequest?: string | undefined;
        exprContextRegExp?: RegExp | undefined;
        exprContextRecursive?: boolean | undefined;
        exprContextCritical?: boolean | undefined;
        wrappedContextRegExp?: RegExp | undefined;
        wrappedContextRecursive?: boolean | undefined;
        wrappedContextCritical?: boolean | undefined;
        strictExportPresence?: boolean | undefined;
    };
    resolve: {
        extensions: string[];
        alias: {
            vue$: string;
        };
        modules?: string[] | undefined;
        descriptionFiles?: string[] | undefined;
        mainFields?: string[] | string[][] | undefined;
        aliasFields?: string[] | string[][] | undefined;
        mainFiles?: string[] | undefined;
        enforceExtension?: boolean | undefined;
        unsafeCache?: boolean | {} | undefined;
        cachePredicate?: ((data: {
            path: string;
            request: string;
        }) => boolean) | undefined;
        plugins?: import("webpack").ResolvePlugin[] | undefined;
        symlinks?: boolean | undefined;
        cacheWithContext?: boolean | undefined;
        roots?: string[] | undefined;
    };
    mode?: "development" | "production" | "none" | undefined;
    name?: string | undefined;
    context?: string | undefined;
    entry?: string | string[] | import("webpack").Entry | import("webpack").EntryFunc | undefined;
    devtool?: boolean | "eval" | "inline-source-map" | "cheap-eval-source-map" | "cheap-source-map" | "cheap-module-eval-source-map" | "cheap-module-source-map" | "eval-source-map" | "source-map" | "nosources-source-map" | "hidden-source-map" | "inline-cheap-source-map" | "inline-cheap-module-source-map" | "@eval" | "@inline-source-map" | "@cheap-eval-source-map" | "@cheap-source-map" | "@cheap-module-eval-source-map" | "@cheap-module-source-map" | "@eval-source-map" | "@source-map" | "@nosources-source-map" | "@hidden-source-map" | "#eval" | "#inline-source-map" | "#cheap-eval-source-map" | "#cheap-source-map" | "#cheap-module-eval-source-map" | "#cheap-module-source-map" | "#eval-source-map" | "#source-map" | "#nosources-source-map" | "#hidden-source-map" | "#@eval" | "#@inline-source-map" | "#@cheap-eval-source-map" | "#@cheap-source-map" | "#@cheap-module-eval-source-map" | "#@cheap-module-source-map" | "#@eval-source-map" | "#@source-map" | "#@nosources-source-map" | "#@hidden-source-map" | undefined;
    output?: import("webpack").Output | undefined;
    resolveLoader?: import("webpack").ResolveLoader | undefined;
    externals?: string | RegExp | import("webpack").ExternalsObjectElement | import("webpack").ExternalsFunctionElement | import("webpack").ExternalsElement[] | undefined;
    target?: "web" | "webworker" | "node" | "async-node" | "node-webkit" | "atom" | "electron" | "electron-renderer" | "electron-preload" | "electron-main" | ((compiler?: any) => void) | undefined;
    bail?: boolean | undefined;
    profile?: boolean | undefined;
    cache?: boolean | object | undefined;
    watch?: boolean | undefined;
    watchOptions?: import("webpack").ICompiler.WatchOptions | undefined;
    node?: false | import("webpack").Node | undefined;
    amd?: {
        [moduleName: string]: boolean;
    } | undefined;
    recordsPath?: string | undefined;
    recordsInputPath?: string | undefined;
    recordsOutputPath?: string | undefined;
    stats?: boolean | "none" | "errors-only" | "errors-warnings" | "minimal" | "normal" | "verbose" | import("webpack").Stats.ToStringOptionsObject | undefined;
    performance?: false | import("webpack").Options.Performance | undefined;
    parallelism?: number | undefined;
    optimization?: import("webpack").Options.Optimization | undefined;
};
