"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractProps = void 0;
function getType(fn) {
    const match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
}
// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L92
function resolveDefault({ type, default: def }) {
    if (typeof def === 'function' && getType(type) !== 'Function') {
        // known limitation: we don't have the component instance to pass
        return def.call();
    }
    return def;
}
function extractProps(component) {
    if (!component)
        return {};
    // @ts-ignore this options business seems not good according to the types
    return Object.entries(component.props || {})
        .map(([name, prop]) => ({ [name]: resolveDefault(prop) }))
        .reduce((wrap, prop) => ({ ...wrap, ...prop }), {});
}
exports.extractProps = extractProps;
//# sourceMappingURL=util.js.map